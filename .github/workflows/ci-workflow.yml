name: FlexOrder CI/CD Pipeline

on:
  push:
    branches: [main, dev, qa]
  # pull_request:
  #   branches: [main, dev, qa]
  workflow_call:
    inputs:
      free_ref:
        required: false
        type: string
        default: main
      pro_ref:
        required: false
        type: string
        default: main

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'
  WORDPRESS_VERSION: '6.7'
  WOOCOMMERCE_VERSION: '8.5.0'
  MYSQL_VERSION: '8.0'

jobs:
  # WordPress Environment Setup
  setup-wordpress:
    name: Setup WordPress Environment
    runs-on: ubuntu-latest
    outputs:
      wordpress-url: ${{ steps.setup.outputs.wordpress-url }}
      woocommerce-status: ${{ steps.woocommerce.outputs.status }}
      api-keys: ${{ steps.api-keys.outputs.keys }}
      # plugin-build: ${{ steps.build.outputs.plugin-path }}  # Commented out - plugin not built in this repo
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      # - name: Build FlexOrder Plugin
      #   id: build
      #   run: |
      #     echo "Building FlexOrder plugin from main branch code"
      #     npm run build:plugin
      #     if [ -f "build/order-sync-with-google-sheets-for-woocommerce.zip" ]; then
      #       echo "plugin-path=build/order-sync-with-google-sheets-for-woocommerce.zip" >> $GITHUB_OUTPUT
      #     else
      #       echo "plugin-path=" >> $GITHUB_OUTPUT
      #       echo "❌ Plugin build failed - no zip file created"
      #       exit 1
      #     fi
        
      - name: Setup MySQL
        run: |
          echo "MySQL will be started by docker-compose"
          
      - name: Start WordPress with Docker
        run: |
          docker compose -f docker-compose.fresh-wordpress.yml up -d
          sleep 30
          
      - name: Wait for WordPress
        run: |
          echo "Waiting for MySQL and WordPress to be ready..."
          timeout=300  # 5 minutes timeout
          counter=0
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL..."
          until docker exec flexorder-mysql mysqladmin ping -h localhost --silent; do
            echo "Waiting for MySQL... (${counter}s)"
            sleep 5
            counter=$((counter + 5))
            if [ $counter -ge $timeout ]; then
              echo "❌ MySQL failed to start within ${timeout} seconds"
              docker compose -f docker-compose.fresh-wordpress.yml logs
              exit 1
            fi
          done
          echo "✅ MySQL is ready!"
          
          # Wait for WordPress to be ready
          echo "Waiting for WordPress..."
          while ! curl -f http://localhost:8080 >/dev/null 2>&1; do
            echo "Waiting for WordPress... (${counter}s)"
            sleep 10
            counter=$((counter + 10))
            if [ $counter -ge $timeout ]; then
              echo "❌ WordPress failed to start within ${timeout} seconds"
              docker compose -f docker-compose.fresh-wordpress.yml logs
              exit 1
            fi
          done
          echo "✅ WordPress is ready!"
          
      - name: Setup WordPress
        id: setup
        run: |
          echo "Setting up WordPress..."
          node scripts/setup-ci-environment.js
          echo "wordpress-url=http://localhost:8080" >> $GITHUB_OUTPUT
          
      - name: Install and Configure WooCommerce
        id: woocommerce
        run: |
          echo "WooCommerce installation and configuration completed via setup script"
          echo "status=installed" >> $GITHUB_OUTPUT
          
      - name: Generate WooCommerce API Keys
        id: api-keys
        run: |
          echo "API keys generation completed via setup script"
          if [ -f "tests/utilities/api-keys.json" ]; then
            # Read the JSON file and escape it properly for GitHub Actions
            keys_content=$(cat tests/utilities/api-keys.json | jq -c .)
            echo "keys=$keys_content" >> $GITHUB_OUTPUT
          else
            echo "keys={\"consumer_key\":\"\",\"consumer_secret\":\"\"}" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate Test Data
        run: |
          echo "Test data generation completed via setup script"

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup-wordpress
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Setup MySQL
        run: |
          echo "MySQL will be started by docker-compose"
          
      - name: Start WordPress Environment
        run: |
          docker compose -f docker-compose.fresh-wordpress.yml up -d
          sleep 30
          
      - name: Wait for WordPress Environment
        run: |
          echo "Waiting for MySQL and WordPress to be ready..."
          timeout=300  # 5 minutes timeout
          counter=0
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL..."
          until docker exec flexorder-mysql mysqladmin ping -h localhost --silent; do
            echo "Waiting for MySQL... (${counter}s)"
            sleep 5
            counter=$((counter + 5))
            if [ $counter -ge $timeout ]; then
              echo "❌ MySQL failed to start within ${timeout} seconds"
              docker compose -f docker-compose.fresh-wordpress.yml logs
              exit 1
            fi
          done
          echo "✅ MySQL is ready!"
          
          # Wait for WordPress to be ready
          echo "Waiting for WordPress..."
          while ! curl -f http://localhost:8080 >/dev/null 2>&1; do
            echo "Waiting for WordPress... (${counter}s)"
            sleep 10
            counter=$((counter + 10))
            if [ $counter -ge $timeout ]; then
              echo "❌ WordPress failed to start within ${timeout} seconds"
              docker compose -f docker-compose.fresh-wordpress.yml logs
              exit 1
            fi
          done
          echo "✅ WordPress is ready!"
          
      - name: Setup WordPress for Testing
        run: |
          node scripts/setup-ci-environment.js
          
      - name: Run E2E Tests
        run: |
          timeout 1800 npm run test:ci:full -- --project=${{ matrix.browser }}
        timeout-minutes: 30
        env:
          CI: true
          CI_FRESH_WORDPRESS: true
          FRESH_SITE_URL: http://localhost:8080
          DB_HOST: 127.0.0.1
          DB_NAME: flexorder_test_${{ matrix.browser }}
          DB_USER: flexorder_user
          DB_PASSWORD: flexorder_pass
          FLEXORDER_PRO_LICENSE_KEY: ${{ secrets.FLEXORDER_PRO_LICENSE_KEY }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            *.png
            *.webm
            
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}
          path: |
            test-results/**/*.png
            *.png

  build-deploy:
    name: Build and Deploy Plugins
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CI Workflow Repo
        uses: actions/checkout@v4

      - name: Checkout Free Plugin (flexorder)
        uses: actions/checkout@v4
        with:
          repository: WPPOOL/flexorder
          ref: ${{ inputs.free_ref }}
          path: flexorder

      - name: Checkout Pro Plugin (flexorder-ultimate)
        uses: actions/checkout@v4
        with:
          repository: WPPOOL/flexorder-ultimate
          ref: ${{ inputs.pro_ref }}
          path: flexorder-ultimate

      - name: Zip Free Plugin
        run: |
          cd flexorder
          zip -r ../flexorder.zip .
          cd ..

      - name: Zip Pro Plugin
        run: |
          cd flexorder-ultimate
          zip -r ../flexorder-ultimate.zip .
          cd ..

      # Example: Install plugins on WordPress (assuming WP-CLI is available)
      - name: Install Free Plugin
        run: wp plugin install flexorder.zip --activate --allow-root

      - name: Install Pro Plugin
        run: wp plugin install flexorder-ultimate.zip --activate --allow-root

      # # Run Playwright Tests
      # - name: Run Playwright Tests
      #   id: playwright
      #   run: |
      #     npx playwright test --reporter=html --output=playwright-report
      #   continue-on-error: true

      # # Send Report via Email ( if fail)
      # - name: Send Report via Email
      #   uses: dawidd6/action-send-mail@v3
      #   with: 
      #     server_address: smtp.gmail.com
      #     server_port: 587
      #     username: ${{ secrets.USERNAME }}
      #     password: ${{ secrets.PASSWORD }}
      #     from: no-replay@gmail.com  # Use the sender email from GitHub Secrets
      #     to: ${{ secrets.SLACK_EMAIL }}  # The recipient email address
      #     subject: "Automation Test Report - Playwright"
      #     body: |
      #       Hi Team,

      #       The automation tests for the production site have completed. 
      #       Please check the attached report for details.
            
      #       $(cat playwright-report/index.html)
      #     attachments: |
      #            ${{ github.workspace }}/playwright-report/index.html
  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    
    steps:
      - name: Stop Docker containers
        run: |
          docker compose -f docker-compose.fresh-wordpress.yml down -v
          docker system prune -f 