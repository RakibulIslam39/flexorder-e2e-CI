name: FlexOrder CI/CD Pipeline

on:
  push:
    branches: [main, dev, qa]
  # pull_request:
  #   branches: [main, dev, qa]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'
  WORDPRESS_VERSION: '6.4'
  WOOCOMMERCE_VERSION: '8.5.0'
  MYSQL_VERSION: '8.0'

jobs:
  # WordPress Environment Setup
  setup-wordpress:
    name: Setup WordPress Environment
    runs-on: ubuntu-latest
    outputs:
      wordpress-url: ${{ steps.setup.outputs.wordpress-url }}
      woocommerce-status: ${{ steps.woocommerce.outputs.status }}
      api-keys: ${{ steps.api-keys.outputs.keys }}
      plugin-build: ${{ steps.build.outputs.plugin-path }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Build FlexOrder Plugin
        id: build
        run: |
          echo "Building FlexOrder plugin from main branch code"
          npm run build:plugin
          if [ -f "build/order-sync-with-google-sheets-for-woocommerce.zip" ]; then
            echo "plugin-path=build/order-sync-with-google-sheets-for-woocommerce.zip" >> $GITHUB_OUTPUT
          else
            echo "plugin-path=" >> $GITHUB_OUTPUT
            echo "❌ Plugin build failed - no zip file created"
            exit 1
          fi
        
      - name: Setup MySQL
        run: |
          docker run --name mysql-${{ github.run_id }} \
            -e MYSQL_ROOT_PASSWORD=rootpassword \
            -e MYSQL_DATABASE=flexorder_test \
            -e MYSQL_USER=flexorder_user \
            -e MYSQL_PASSWORD=flexorder_pass \
            -p 3306:3306 \
            -d mysql:${{ env.MYSQL_VERSION }}
          
          # Wait for MySQL to be ready
          until docker exec mysql-${{ github.run_id }} mysqladmin ping -h localhost --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          
      - name: Start WordPress with Docker
        run: |
          docker-compose -f docker-compose.fresh-wordpress.yml up -d
          sleep 30
          
      - name: Wait for WordPress
        run: |
          echo "Waiting for WordPress to be ready..."
          timeout=300  # 5 minutes timeout
          counter=0
          while ! curl -f http://localhost:8080 >/dev/null 2>&1; do
            echo "Waiting for WordPress... (${counter}s)"
            sleep 10
            counter=$((counter + 10))
            if [ $counter -ge $timeout ]; then
              echo "❌ WordPress failed to start within ${timeout} seconds"
              docker-compose -f docker-compose.fresh-wordpress.yml logs
              exit 1
            fi
          done
          echo "✅ WordPress is ready!"
          
      - name: Setup WordPress
        id: setup
        run: |
          echo "Setting up WordPress..."
          chmod +x main.sh
          CI=true CI_FRESH_WORDPRESS=true ./main.sh
          echo "wordpress-url=http://localhost:8080" >> $GITHUB_OUTPUT
          
      - name: Install and Configure WooCommerce
        id: woocommerce
        run: |
          echo "WooCommerce installation and configuration completed via main.sh"
          echo "status=installed" >> $GITHUB_OUTPUT
          
      - name: Generate WooCommerce API Keys
        id: api-keys
        run: |
          echo "API keys generation completed via main.sh"
          if [ -f "tests/utilities/api-keys.json" ]; then
            echo "keys=$(cat tests/utilities/api-keys.json)" >> $GITHUB_OUTPUT
          else
            echo "keys={\"consumer_key\":\"\",\"consumer_secret\":\"\"}" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate Test Data
        run: |
          echo "Test data generation completed via main.sh"

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup-wordpress
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Setup MySQL
        run: |
          docker run --name mysql-${{ github.run_id }}-${{ matrix.browser }} \
            -e MYSQL_ROOT_PASSWORD=rootpassword \
            -e MYSQL_DATABASE=flexorder_test_${{ matrix.browser }} \
            -e MYSQL_USER=flexorder_user \
            -e MYSQL_PASSWORD=flexorder_pass \
            -p 3306:3306 \
            -d mysql:${{ env.MYSQL_VERSION }}
          
          # Wait for MySQL to be ready
          until docker exec mysql-${{ github.run_id }}-${{ matrix.browser }} mysqladmin ping -h localhost --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          
      - name: Start WordPress Environment
        run: |
          docker-compose -f docker-compose.fresh-wordpress.yml up -d
          sleep 30
          
      - name: Setup WordPress for Testing
        run: |
          chmod +x main.sh
          CI=true CI_FRESH_WORDPRESS=true ./main.sh
          
      - name: Run E2E Tests
        run: |
          timeout 1800 CI=true CI_FRESH_WORDPRESS=true npm run test:ci:full -- --project=${{ matrix.browser }}
        timeout-minutes: 30
        env:
          CI: true
          CI_FRESH_WORDPRESS: true
          FRESH_SITE_URL: http://localhost:8080
          DB_HOST: 127.0.0.1
          DB_NAME: flexorder_test_${{ matrix.browser }}
          DB_USER: flexorder_user
          DB_PASSWORD: flexorder_pass
          FLEXORDER_PRO_LICENSE_KEY: ${{ secrets.FLEXORDER_PRO_LICENSE_KEY }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            *.png
            *.webm
            
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}
          path: |
            test-results/**/*.png
            *.png

  # Build and Deploy
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Plugin
        run: |
          echo "Building FlexOrder plugin for release"
          timeout 600 npm run build:plugin
          
          # Create Pro version if license key is available
          if [ -n "${{ secrets.FLEXORDER_PRO_LICENSE_KEY }}" ]; then
            echo "Building Pro version"
            timeout 600 npm run build:pro
          fi
        timeout-minutes: 15
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline
            
            ## Changes
            - E2E tests passed across all browsers
            
            ## Artifacts
            - Plugin build included
            - Pro version included (if license available)
          draft: false
          prerelease: false
          
      - name: Upload Plugin Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/order-sync-with-google-sheets-for-woocommerce.zip
          asset_name: order-sync-with-google-sheets-for-woocommerce.zip
          asset_content_type: application/zip
          
      - name: Upload Pro Plugin Build
        uses: actions/upload-release-asset@v1
        if: secrets.FLEXORDER_PRO_LICENSE_KEY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/order-sync-with-google-sheets-for-woocommerce-pro.zip
          asset_name: order-sync-with-google-sheets-for-woocommerce-pro.zip
          asset_content_type: application/zip

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-deploy]
    if: always()
    
    steps:
      - name: Stop Docker containers
        run: |
          docker-compose -f docker-compose.fresh-wordpress.yml down -v
          docker system prune -f 