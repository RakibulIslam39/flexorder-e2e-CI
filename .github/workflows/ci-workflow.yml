name: FlexOrder CI/CD Pipeline

on:
  push:
    branches: [main, dev, qa]
  pull_request:
    branches: [main, dev, qa]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'
  WORDPRESS_VERSION: '6.4'
  WOOCOMMERCE_VERSION: '8.5.0'
  MYSQL_VERSION: '8.0'

jobs:
  # WordPress Environment Setup
  setup-wordpress:
    name: Setup WordPress Environment
    runs-on: ubuntu-latest
    outputs:
      wordpress-url: ${{ steps.setup.outputs.wordpress-url }}
      woocommerce-status: ${{ steps.woocommerce.outputs.status }}
      api-keys: ${{ steps.api-keys.outputs.keys }}
      plugin-build: ${{ steps.build.outputs.plugin-path }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Build FlexOrder Plugin
        id: build
        run: |
          echo "Building FlexOrder plugin from main branch code"
          mkdir -p build
          
          # Build the plugin (assuming there's a build process)
          if [ -f "package.json" ] && grep -q "build" package.json; then
            echo "Running npm build process"
            npm run build
          fi
          
          # Create plugin zip file
          echo "Creating plugin zip file"
          if [ -d "src" ]; then
            # If there's a src directory, zip it
            zip -r "build/order-sync-with-google-sheets-for-woocommerce.zip" src/ -x "*.DS_Store" "*/node_modules/*" "*/tests/*" "*/docs/*"
          else
            # Zip the entire plugin directory
            zip -r "build/order-sync-with-google-sheets-for-woocommerce.zip" . -x "*.DS_Store" "*/node_modules/*" "*/tests/*" "*/docs/*" "*.git*" "build/*"
          fi
          
          echo "Plugin built successfully"
          echo "plugin-path=build/order-sync-with-google-sheets-for-woocommerce.zip" >> $GITHUB_OUTPUT
        
      - name: Setup MySQL
        run: |
          docker run --name mysql-${{ github.run_id }} \
            -e MYSQL_ROOT_PASSWORD=rootpassword \
            -e MYSQL_DATABASE=flexorder_test \
            -e MYSQL_USER=flexorder_user \
            -e MYSQL_PASSWORD=flexorder_pass \
            -p 3306:3306 \
            -d mysql:${{ env.MYSQL_VERSION }}
          
          # Wait for MySQL to be ready
          until docker exec mysql-${{ github.run_id }} mysqladmin ping -h localhost --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          
      - name: Start WordPress with Docker
        run: |
          docker-compose -f docker-compose.fresh-wordpress.yml up -d
          sleep 30
          
      - name: Wait for WordPress
        run: |
          until curl -f http://localhost:8080; do
            echo "Waiting for WordPress..."
            sleep 10
          done
          
      - name: Setup WordPress
        id: setup
        run: |
          echo "Setting up WordPress..."
          chmod +x main.sh
          ./main.sh
          echo "wordpress-url=http://localhost:8080" >> $GITHUB_OUTPUT
          
      - name: Install and Configure WooCommerce
        id: woocommerce
        run: |
          echo "WooCommerce installation and configuration completed via main.sh"
          echo "status=installed" >> $GITHUB_OUTPUT
          
      - name: Generate WooCommerce API Keys
        id: api-keys
        run: |
          echo "API keys generation completed via main.sh"
          echo "keys=$(cat tests/utilities/api-keys.json)" >> $GITHUB_OUTPUT
          
      - name: Generate Test Data
        run: |
          echo "Test data generation completed via main.sh"

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup-wordpress
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        branch: [dev, qa, main]
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Build FlexOrder Plugin
        run: |
          echo "Building FlexOrder plugin for testing"
          mkdir -p build
          
          # Build the plugin
          if [ -f "package.json" ] && grep -q "build" package.json; then
            npm run build
          fi
          
          # Create plugin zip file
          if [ -d "src" ]; then
            zip -r "build/order-sync-with-google-sheets-for-woocommerce.zip" src/ -x "*.DS_Store" "*/node_modules/*" "*/tests/*" "*/docs/*"
          else
            zip -r "build/order-sync-with-google-sheets-for-woocommerce.zip" . -x "*.DS_Store" "*/node_modules/*" "*/tests/*" "*/docs/*" "*.git*" "build/*"
          fi
        
      - name: Setup MySQL
        run: |
          docker run --name mysql-${{ github.run_id }}-${{ matrix.browser }} \
            -e MYSQL_ROOT_PASSWORD=rootpassword \
            -e MYSQL_DATABASE=flexorder_test_${{ matrix.browser }} \
            -e MYSQL_USER=flexorder_user \
            -e MYSQL_PASSWORD=flexorder_pass \
            -p 3306:3306 \
            -d mysql:${{ env.MYSQL_VERSION }}
          
          # Wait for MySQL to be ready
          until docker exec mysql-${{ github.run_id }}-${{ matrix.browser }} mysqladmin ping -h localhost --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          
      - name: Start WordPress Environment
        run: |
          docker-compose -f docker-compose.fresh-wordpress.yml up -d
          sleep 30
          
      - name: Setup WordPress for Testing
        run: |
          chmod +x main.sh
          CI=true CI_FRESH_WORDPRESS=true ./main.sh
          
      - name: Run E2E Tests
        run: |
          CI=true CI_FRESH_WORDPRESS=true npm run test:ci:full -- --project=${{ matrix.browser }}
        env:
          CI: true
          CI_FRESH_WORDPRESS: true
          FRESH_SITE_URL: http://localhost:8080
          DB_HOST: 127.0.0.1
          DB_NAME: flexorder_test_${{ matrix.browser }}
          DB_USER: flexorder_user
          DB_PASSWORD: flexorder_pass
          FLEXORDER_PRO_LICENSE_KEY: ${{ secrets.FLEXORDER_PRO_LICENSE_KEY }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.branch }}
          path: |
            test-results/
            playwright-report/
            *.png
            *.webm
            
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}-${{ matrix.branch }}
          path: |
            test-results/**/*.png
            *.png

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup-wordpress
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/qa'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Integration Tests
        run: npm run test:integration
        env:
          CI: true
          WORDPRESS_URL: ${{ needs.setup-wordpress.outputs.wordpress-url }}
          WOOCOMMERCE_CONSUMER_KEY: ${{ fromJSON(needs.setup-wordpress.outputs.api-keys).consumer_key }}
          WOOCOMMERCE_CONSUMER_SECRET: ${{ fromJSON(needs.setup-wordpress.outputs.api-keys).consumer_secret }}
          FLEXORDER_PRO_LICENSE_KEY: ${{ secrets.FLEXORDER_PRO_LICENSE_KEY }}

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: setup-wordpress
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Performance Tests
        run: npm run test:performance
        env:
          CI: true
          WORDPRESS_URL: ${{ needs.setup-wordpress.outputs.wordpress-url }}
          FLEXORDER_PRO_LICENSE_KEY: ${{ secrets.FLEXORDER_PRO_LICENSE_KEY }}

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: setup-wordpress
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Security Tests
        run: npm run test:security
        env:
          CI: true
          WORDPRESS_URL: ${{ needs.setup-wordpress.outputs.wordpress-url }}
          FLEXORDER_PRO_LICENSE_KEY: ${{ secrets.FLEXORDER_PRO_LICENSE_KEY }}

  # Build and Deploy
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [e2e-tests, integration-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Plugin
        run: |
          echo "Building FlexOrder plugin for release"
          mkdir -p build
          
          # Build the plugin
          if [ -f "package.json" ] && grep -q "build" package.json; then
            npm run build
          fi
          
          # Create plugin zip file
          if [ -d "src" ]; then
            zip -r "build/order-sync-with-google-sheets-for-woocommerce.zip" src/ -x "*.DS_Store" "*/node_modules/*" "*/tests/*" "*/docs/*"
          else
            zip -r "build/order-sync-with-google-sheets-for-woocommerce.zip" . -x "*.DS_Store" "*/node_modules/*" "*/tests/*" "*/docs/*" "*.git*" "build/*"
          fi
          
          # Create Pro version if license key is available
          if [ -n "${{ vars.FLEXORDER_PRO_LICENSE_KEY || secrets.FLEXORDER_PRO_LICENSE_KEY }}" ]; then
            echo "Building Pro version"
            if [ -d "pro" ]; then
              zip -r "build/order-sync-with-google-sheets-for-woocommerce-pro.zip" pro/ -x "*.DS_Store" "*/node_modules/*" "*/tests/*" "*/docs/*"
            fi
          fi
        
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline
            
            ## Changes
            - E2E tests passed
            - Integration tests passed
            - Performance tests passed
            - Security tests passed
            
            ## Artifacts
            - Plugin build included
            - Pro version included (if license available)
          draft: false
          prerelease: false
          
      - name: Upload Plugin Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/order-sync-with-google-sheets-for-woocommerce.zip
          asset_name: order-sync-with-google-sheets-for-woocommerce.zip
          asset_content_type: application/zip
          
      - name: Upload Pro Plugin Build
        uses: actions/upload-release-asset@v1
        if: secrets.FLEXORDER_PRO_LICENSE_KEY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/order-sync-with-google-sheets-for-woocommerce-pro.zip
          asset_name: order-sync-with-google-sheets-for-woocommerce-pro.zip
          asset_content_type: application/zip

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [e2e-tests, integration-tests, performance-tests, security-tests, build-deploy]
    if: always()
    
    steps:
      - name: Stop Docker containers
        run: |
          docker-compose -f docker-compose.fresh-wordpress.yml down -v
          docker system prune -f 