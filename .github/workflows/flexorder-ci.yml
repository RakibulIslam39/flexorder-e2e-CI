name: FlexOrder Plugin CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
      - develop
  pull_request:
    branches:
      - dev
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - smoke
          - regression
          - all

env:
  WORDPRESS_VERSION: '6.4'
  PHP_VERSION: '8.1'
  MYSQL_VERSION: '8.0'
  WOOCOMMERCE_VERSION: '8.5'
  PLUGIN_SLUG: 'order-sync-with-google-sheets-for-woocommerce'
  NODE_VERSION: '18'

jobs:
  # Job 1: Build Plugin Packages (Improved)
  build-plugin:
    name: Build Plugin Packages
    runs-on: ubuntu-latest
    outputs:
      dev-zip: ${{ steps.build-dev.outputs.zip-path }}
      main-zip: ${{ steps.build-main.outputs.zip-path }}
      version: ${{ steps.get-version.outputs.version }}
      build-info: ${{ steps.build-info.outputs.info }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Get Plugin Version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Plugin version: $VERSION"

      - name: Build Info
        id: build-info
        run: |
          BUILD_INFO=$(cat <<EOF
          {
            "version": "${{ steps.get-version.outputs.version }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "triggered_by": "${{ github.actor }}"
          }
          EOF
          )
          echo "info=$BUILD_INFO" >> $GITHUB_OUTPUT

      - name: Build Dev Branch Plugin
        id: build-dev
        run: |
          git checkout dev
          PLUGIN_NAME="${PLUGIN_SLUG}-dev-${{ steps.get-version.outputs.version }}.zip"
          
          # Create build directory
          mkdir -p build-temp
          
          # Copy files excluding development files
          rsync -av --exclude='.git' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='.github' \
            --exclude='*.md' \
            --exclude='.gitignore' \
            --exclude='.eslintrc.js' \
            --exclude='tsconfig.json' \
            --exclude='playwright.config.ts' \
            --exclude='docs' \
            --exclude='scripts' \
            --exclude='test-utils' \
            --exclude='config' \
            --exclude='.husky' \
            --exclude='SECURITY.md' \
            --exclude='package*.json' \
            --exclude='.prettierrc' \
            --exclude='playwright-report' \
            --exclude='test-results' \
            --exclude='build-temp' \
            ./ build-temp/
          
          # Create zip file
          cd build-temp
          zip -r "../$PLUGIN_NAME" .
          cd ..
          
          echo "zip-path=$PLUGIN_NAME" >> $GITHUB_OUTPUT
          echo "Built dev plugin: $PLUGIN_NAME"
          
          # Cleanup
          rm -rf build-temp

      - name: Build Main Branch Plugin
        id: build-main
        run: |
          git checkout main
          PLUGIN_NAME="${PLUGIN_SLUG}-main-${{ steps.get-version.outputs.version }}.zip"
          
          # Create build directory
          mkdir -p build-temp
          
          # Copy files excluding development files
          rsync -av --exclude='.git' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='.github' \
            --exclude='*.md' \
            --exclude='.gitignore' \
            --exclude='.eslintrc.js' \
            --exclude='tsconfig.json' \
            --exclude='playwright.config.ts' \
            --exclude='docs' \
            --exclude='scripts' \
            --exclude='test-utils' \
            --exclude='config' \
            --exclude='.husky' \
            --exclude='SECURITY.md' \
            --exclude='package*.json' \
            --exclude='.prettierrc' \
            --exclude='playwright-report' \
            --exclude='test-results' \
            --exclude='build-temp' \
            ./ build-temp/
          
          # Create zip file
          cd build-temp
          zip -r "../$PLUGIN_NAME" .
          cd ..
          
          echo "zip-path=$PLUGIN_NAME" >> $GITHUB_OUTPUT
          echo "Built main plugin: $PLUGIN_NAME"
          
          # Cleanup
          rm -rf build-temp

      - name: Upload Plugin Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flexorder-plugins
          path: |
            *.zip
          retention-days: 30

  # Job 2: Code Quality Check (Enhanced)
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run TypeScript Check
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier Check
        run: npx prettier --check .

      - name: Security Audit
        run: npm audit --audit-level=moderate

      - name: Check for Vulnerable Dependencies
        run: |
          if npm audit --audit-level=high; then
            echo "High severity vulnerabilities found"
            exit 1
          fi

  # Job 3: Setup Fresh WordPress Environment (Improved)
  setup-wordpress:
    name: Setup Fresh WordPress Environment
    runs-on: ubuntu-latest
    needs: [build-plugin, code-quality]
    outputs:
      site-url: ${{ steps.setup-site.outputs.site-url }}
      admin-credentials: ${{ steps.setup-site.outputs.admin-credentials }}
      wc-credentials: ${{ steps.setup-woocommerce.outputs.wc-credentials }}
      plugin-info: ${{ steps.install-plugin.outputs.plugin-info }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Plugin Artifacts
        uses: actions/download-artifact@v4
        with:
          name: flexorder-plugins
          path: ./plugins

      - name: Setup WordPress with Docker
        id: setup-site
        run: |
          # Create docker-compose.yml for WordPress setup
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            wordpress:
              image: wordpress:${WORDPRESS_VERSION}-php${PHP_VERSION}-apache
              ports:
                - "8080:80"
              environment:
                WORDPRESS_DB_HOST: mysql
                WORDPRESS_DB_NAME: wordpress
                WORDPRESS_DB_USER: wordpress
                WORDPRESS_DB_PASSWORD: wordpress_password
                WORDPRESS_DEBUG: 1
                WORDPRESS_CONFIG_EXTRA: |
                  define('WP_DEBUG_LOG', true);
                  define('WP_DEBUG_DISPLAY', false);
                  define('WP_MEMORY_LIMIT', '256M');
                  define('WP_MAX_MEMORY_LIMIT', '512M');
                  define('WP_AUTO_UPDATE_CORE', false);
              volumes:
                - wordpress_data:/var/www/html
                - ./plugins:/var/www/html/wp-content/plugins
                - ./uploads:/var/www/html/wp-content/uploads
              depends_on:
                mysql:
                  condition: service_healthy
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:80"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            mysql:
              image: mysql:${MYSQL_VERSION}
              environment:
                MYSQL_DATABASE: wordpress
                MYSQL_USER: wordpress
                MYSQL_PASSWORD: wordpress_password
                MYSQL_ROOT_PASSWORD: somewordpress
              volumes:
                - mysql_data:/var/lib/mysql
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "wordpress", "-pwordpress_password"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s

            phpmyadmin:
              image: phpmyadmin/phpmyadmin
              ports:
                - "8081:80"
              environment:
                PMA_HOST: mysql
                PMA_USER: wordpress
                PMA_PASSWORD: wordpress_password
              depends_on:
                mysql:
                  condition: service_healthy
              restart: unless-stopped

          volumes:
            wordpress_data:
            mysql_data:
          EOF

          # Start WordPress
          docker-compose up -d

          # Wait for WordPress to be ready
          echo "Waiting for WordPress to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8080; do sleep 5; done'

          # Get site URL
          SITE_URL="http://localhost:8080"
          echo "site-url=$SITE_URL" >> $GITHUB_OUTPUT

          # Create admin user
          ADMIN_USER="admin"
          ADMIN_PASSWORD="admin123"
          ADMIN_EMAIL="admin@test.local"

          # Install WP-CLI
          docker-compose exec -T wordpress curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          docker-compose exec -T wordpress chmod +x wp-cli.phar
          docker-compose exec -T wordpress mv wp-cli.phar /usr/local/bin/wp

          # Create admin user
          docker-compose exec -T wordpress wp core install \
            --url="$SITE_URL" \
            --title="FlexOrder Test Site" \
            --admin_user="$ADMIN_USER" \
            --admin_password="$ADMIN_PASSWORD" \
            --admin_email="$ADMIN_EMAIL" \
            --skip-email

          # Store credentials
          echo "admin-credentials={\"user\":\"$ADMIN_USER\",\"password\":\"$ADMIN_PASSWORD\",\"email\":\"$ADMIN_EMAIL\"}" >> $GITHUB_OUTPUT

          echo "WordPress setup completed at $SITE_URL"

      - name: Install FlexOrder Plugin
        id: install-plugin
        run: |
          # Install the main branch plugin
          PLUGIN_FILE=$(ls ./plugins/*main*.zip | head -1)
          
          if [ -z "$PLUGIN_FILE" ]; then
            echo "No main branch plugin found, trying dev branch"
            PLUGIN_FILE=$(ls ./plugins/*dev*.zip | head -1)
          fi
          
          if [ -z "$PLUGIN_FILE" ]; then
            echo "No plugin file found!"
            exit 1
          fi
          
          echo "Installing plugin: $PLUGIN_FILE"
          
          # Install and activate plugin
          docker-compose exec -T wordpress wp plugin install $PLUGIN_FILE --activate
          
          # Get plugin info
          PLUGIN_INFO=$(docker-compose exec -T wordpress wp plugin list --format=json | jq -r '.[] | select(.name | contains("order-sync")) | {name: .name, status: .status, version: .version}')
          
          echo "plugin-info=$PLUGIN_INFO" >> $GITHUB_OUTPUT
          
          # Verify plugin installation
          docker-compose exec -T wordpress wp plugin list --status=active

      - name: Setup WooCommerce and Generate API Keys
        id: setup-woocommerce
        run: |
          # Install WooCommerce
          docker-compose exec -T wordpress wp plugin install woocommerce --activate

          # Configure WooCommerce
          docker-compose exec -T wordpress wp option update woocommerce_currency USD
          docker-compose exec -T wordpress wp option update woocommerce_weight_unit lbs
          docker-compose exec -T wordpress wp option update woocommerce_dimension_unit in
          docker-compose exec -T wordpress wp option update woocommerce_price_decimal_sep .
          docker-compose exec -T wordpress wp option update woocommerce_price_thousand_sep ,

          # Generate WooCommerce REST API key
          echo "Generating WooCommerce REST API key..."
          API_KEY_DATA=$(docker-compose exec -T wordpress wp wc api create_key \
            --user=admin \
            --description="FlexOrder Test API Key" \
            --permissions=read_write \
            --format=json)
          
          # Extract consumer key and secret
          CONSUMER_KEY=$(echo $API_KEY_DATA | jq -r '.consumer_key')
          CONSUMER_SECRET=$(echo $API_KEY_DATA | jq -r '.consumer_secret')
          
          echo "Consumer Key: $CONSUMER_KEY"
          echo "Consumer Secret: $CONSUMER_SECRET"
          
          # Store API credentials
          echo "wc-credentials={\"consumer_key\":\"$CONSUMER_KEY\",\"consumer_secret\":\"$CONSUMER_SECRET\"}" >> $GITHUB_OUTPUT
          
          # Save API credentials to environment
          echo "WOOCOMMERCE_CONSUMER_KEY=$CONSUMER_KEY" >> $GITHUB_ENV
          echo "WOOCOMMERCE_CONSUMER_SECRET=$CONSUMER_SECRET" >> $GITHUB_ENV

      - name: Create Test Data
        run: |
          # Create test products
          echo "Creating test products..."
          for i in {1..5}; do
            docker-compose exec -T wordpress wp wc product create \
              --user=admin \
              --name="Test Product $i" \
              --type=simple \
              --regular_price=$(($RANDOM % 100 + 10)).99 \
              --description="Test product $i for automation" \
              --short_description="Test product $i" \
              --status=publish \
              --sku="TEST-$i"
          done

          # Create test orders
          echo "Creating test orders..."
          for i in {1..3}; do
            docker-compose exec -T wordpress wp wc order create \
              --user=admin \
              --status=processing \
              --billing='{"first_name":"Test","last_name":"Customer","email":"test$i@example.com","phone":"1234567890","address_1":"123 Test St","city":"Test City","state":"TS","postcode":"12345","country":"US"}' \
              --shipping='{"first_name":"Test","last_name":"Customer","address_1":"123 Test St","city":"Test City","state":"TS","postcode":"12345","country":"US"}' \
              --line_items='[{"product_id":1,"quantity":1}]'
          done

          # Activate Cash on Delivery
          docker-compose exec -T wordpress wp wc payment_gateway update cod --enabled=yes

          echo "Test data creation completed"

  # Job 4: Run Automation Tests (Enhanced)
  run-tests:
    name: Run FlexOrder Automation Tests
    runs-on: ubuntu-latest
    needs: [build-plugin, code-quality, setup-wordpress]
    strategy:
      matrix:
        browser: [chromium, firefox]
        test-type: [smoke, regression]
      fail-fast: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup Environment Variables
        run: |
          cat > .env << EOF
          # Site Configuration
          URL=${{ needs.setup-wordpress.outputs.site-url }}/wp-login.php?loggedout=true&wp_lang=en_US
          ADMIN_PANEL_URL=${{ needs.setup-wordpress.outputs.site-url }}/wp-admin/
          SITE_URL=${{ needs.setup-wordpress.outputs.site-url }}/
          PLAYWRIGHT_BASE_URL=${{ needs.setup-wordpress.outputs.site-url }}/
          
          # Admin Credentials
          USER_NAME=${{ fromJson(needs.setup-wordpress.outputs.admin-credentials).user }}
          PASSWORD=${{ fromJson(needs.setup-wordpress.outputs.admin-credentials).password }}
          
          # WooCommerce Configuration
          WOOCOMMERCE_CONSUMER_KEY=${{ fromJson(needs.setup-wordpress.outputs.wc-credentials).consumer_key }}
          WOOCOMMERCE_CONSUMER_SECRET=${{ fromJson(needs.setup-wordpress.outputs.wc-credentials).consumer_secret }}
          
          # Google Sheets Configuration
          GOOGLE_SHEET_ID=${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SHEET_URL=${{ secrets.GOOGLE_SHEET_URL }}
          GOOGLE_SHEET_SCOPES=https://www.googleapis.com/auth/spreadsheets
          SHEET_NAME=Orders
          SHEET_RANGE=Orders!A1:Z1000
          
          # Google Account Configuration
          GOOGLE_ACCOUNT_EMAIL=${{ secrets.GOOGLE_ACCOUNT_EMAIL }}
          GOOGLE_ACCOUNT_PASSWORD=${{ secrets.GOOGLE_ACCOUNT_PASSWORD }}
          
          # Service Account Configuration
          SERVICE_ACCOUNT_UPLOAD_FILE=./tests/utilities/upload_key.json
          GOOGLE_PROJECT=${{ secrets.GOOGLE_PROJECT }}
          
          # Plugin Configuration
          Replace_Plugin_Path=tests/utilities/order-sync-with-google-sheets-for-woocommerce.zip
          REPLACE_PLUGIN_URL=${{ secrets.REPLACE_PLUGIN_URL }}
          
          # Apps Script Configuration
          APPS_SCRIPT_DEPLOYMENT_ID=${{ secrets.APPS_SCRIPT_DEPLOYMENT_ID }}
          APPS_SCRIPT_PROJECT_ID=${{ secrets.APPS_SCRIPT_PROJECT_ID }}
          Web_App_URL=${{ secrets.WEB_APP_URL }}
          
          # Test Configuration
          ARRAY_INDEX=6
          STOCK_STATUS=wc-completed
          ORDER_STATUS_RANGE=Orders!C2:C1000
          
          # Playwright Configuration
          CI=true
          TEST_TIMEOUT=300000
          RETRY_ATTEMPTS=2
          PARALLEL_WORKERS=1
          HEADLESS=true
          SLOW_MO=0
          EOF

      - name: Run Tests on ${{ matrix.browser }} - ${{ matrix.test-type }}
        run: |
          if [ "${{ matrix.test-type }}" = "smoke" ]; then
            npx playwright test --project=${{ matrix.browser }} --grep @smoke --reporter=html,junit,json
          else
            npx playwright test --project=${{ matrix.browser }} --reporter=html,junit,json
          fi
        continue-on-error: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.test-type }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Job 5: Database Backup and Cleanup (Enhanced)
  database-management:
    name: Database Management
    runs-on: ubuntu-latest
    needs: [setup-wordpress, run-tests]
    if: always()

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Backup Database
        run: |
          # Create backup directory
          mkdir -p database-backups

          # Backup WordPress database
          docker-compose exec -T mysql mysqldump -u wordpress -pwordpress_password wordpress > database-backups/wordpress-backup-$(date +%Y%m%d-%H%M%S).sql

          # Backup plugin data
          docker-compose exec -T wordpress wp db export database-backups/plugin-data-$(date +%Y%m%d-%H%M%S).sql --tables=wp_options,wp_postmeta

          # Create backup info
          cat > database-backups/backup-info.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "wordpress_version": "${{ env.WORDPRESS_VERSION }}",
            "woocommerce_version": "${{ env.WOOCOMMERCE_VERSION }}",
            "plugin_version": "${{ needs.build-plugin.outputs.version }}"
          }
          EOF

      - name: Upload Database Backups
        uses: actions/upload-artifact@v4
        with:
          name: database-backups
          path: database-backups/
          retention-days: 7

      - name: Cleanup Test Environment
        if: always()
        run: |
          # Stop and remove containers
          docker-compose down -v

          # Remove volumes
          docker volume prune -f

  # Job 6: Generate Test Report (Enhanced)
  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [run-tests, database-management]
    if: always()

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: ./all-test-results

      - name: Generate Comprehensive Report
        run: |
          # Create report directory
          mkdir -p reports

          # Generate HTML report
          cat > reports/test-report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>FlexOrder Plugin Test Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 8px; margin-bottom: 20px; }
                  .summary { margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 8px; }
                  .browser-results { margin: 10px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                  .success { background: #d4edda; border-color: #c3e6cb; }
                  .failure { background: #f8d7da; border-color: #f5c6cb; }
                  .warning { background: #fff3cd; border-color: #ffeaa7; }
                  .info { background: #d1ecf1; border-color: #bee5eb; }
                  .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
                  .stat-card { background: white; padding: 15px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); text-align: center; }
                  .stat-number { font-size: 2em; font-weight: bold; color: #667eea; }
                  .stat-label { color: #666; margin-top: 5px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 FlexOrder Plugin Test Report</h1>
                      <p><strong>Generated:</strong> $(date)</p>
                      <p><strong>Commit:</strong> ${{ github.sha }}</p>
                      <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                      <p><strong>Environment:</strong> Fresh WordPress + WooCommerce Setup</p>
                  </div>
                  
                  <div class="summary">
                      <h2>📊 Test Summary</h2>
                      <div class="stats">
                          <div class="stat-card">
                              <div class="stat-number">2</div>
                              <div class="stat-label">Browsers Tested</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number">2</div>
                              <div class="stat-label">Test Types</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number">${{ env.WORDPRESS_VERSION }}</div>
                              <div class="stat-label">WordPress Version</div>
                          </div>
                          <div class="stat-card">
                              <div class="stat-number">${{ env.WOOCOMMERCE_VERSION }}</div>
                              <div class="stat-label">WooCommerce Version</div>
                          </div>
                      </div>
                      <p><strong>Test Types:</strong> Smoke, Regression</p>
                      <p><strong>Browsers:</strong> Chrome, Firefox</p>
                      <p><strong>Database:</strong> MySQL ${{ env.MYSQL_VERSION }}</p>
                  </div>
                  
                  <div class="browser-results info">
                      <h3>🔍 Test Results</h3>
                      <p>Check individual browser artifacts for detailed results.</p>
                      <ul>
                          <li>Chrome - Smoke Tests</li>
                          <li>Chrome - Regression Tests</li>
                          <li>Firefox - Smoke Tests</li>
                          <li>Firefox - Regression Tests</li>
                      </ul>
                  </div>
                  
                  <div class="browser-results warning">
                      <h3>📋 Build Information</h3>
                      <p><strong>Plugin Version:</strong> ${{ needs.build-plugin.outputs.version }}</p>
                      <p><strong>Build Time:</strong> $(date -u +%Y-%m-%dT%H:%M:%SZ)</p>
                      <p><strong>Triggered By:</strong> ${{ github.actor }}</p>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: reports/
          retention-days: 30

  # Job 7: Notifications (Enhanced)
  notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always()

    steps:
      - name: Download Test Report
        uses: actions/download-artifact@v4
        with:
          name: test-report
          path: ./reports

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        if: failure() || always()
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          subject: "🚀 FlexOrder Plugin CI/CD Report - ${{ github.ref_name }}"
          body: |
            Hi Team,

            🚀 FlexOrder Plugin CI/CD pipeline has completed.

            **📋 Build Details:**
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Triggered by: ${{ github.actor }}
            - Environment: Fresh WordPress + WooCommerce Setup
            - Plugin Version: ${{ needs.build-plugin.outputs.version }}

            **🧪 Test Results:**
            - Status: ${{ job.status }}
            - WordPress Version: ${{ env.WORDPRESS_VERSION }}
            - WooCommerce Version: ${{ env.WOOCOMMERCE_VERSION }}
            - Test Types: Smoke, Regression
            - Browsers: Chrome, Firefox

            **🔧 Environment:**
            - Fresh WordPress installation
            - WooCommerce with API keys
            - Test data (5 products, 3 orders)
            - FlexOrder plugin installed and activated

            Please check the attached report for detailed results.

            Best regards,
            FlexOrder CI/CD System 🤖

          attachments: |
            ./reports/test-report.html

      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#flexorder-ci'
          text: |
            🚀 FlexOrder Plugin CI/CD Pipeline
            Branch: ${{ github.ref_name }}
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Environment: Fresh WordPress + WooCommerce Setup
            Plugin Version: ${{ needs.build-plugin.outputs.version }}

  # Job 8: Deploy to Staging/Production (Enhanced)
  deploy:
    name: Deploy Plugin
    runs-on: ubuntu-latest
    needs: [build-plugin, run-tests]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Download Plugin Artifacts
        uses: actions/download-artifact@v4
        with:
          name: flexorder-plugins
          path: ./plugins

      - name: Deploy to WordPress.org (if production)
        if: github.event.inputs.environment == 'production'
        run: |
          echo "🚀 Deploying to WordPress.org..."
          # Add WordPress.org deployment logic here
          # This would typically involve using SVN to commit to WordPress.org plugin repository
          echo "WordPress.org deployment would happen here"

      - name: Deploy to Staging Site
        if: github.event.inputs.environment == 'staging'
        run: |
          echo "🚀 Deploying to staging site..."
          # Add staging deployment logic here
          # This could involve uploading to a staging server or updating a staging WordPress site
          echo "Staging deployment would happen here"

      - name: Create Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Plugin Version:** ${{ needs.build-plugin.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY 